import java.util.*;
public class TollBoothLine {
	protected static final int MAX_LINE_LENGTH = 25;
	private String lineType=""; //M or A
	private int nextVehicleTime = 0;
	private int numOfVehicles = 0;
	private int maxLengthReached = 0;
	List<Vehicle> vehicleList = new ArrayList<Vehicle>(MAX_LINE_LENGTH); //allows object to contain vehicles of any type
	//Constructor
	public TollBoothLine(String type){ this.setLineType(type); } //error handling not needed. type is generated by input file
	//list methods
	public boolean isFull() { boolean retval = (numOfVehicles >= MAX_LINE_LENGTH) ? true:false; return retval; }
	//get methods
	public List<Vehicle> getVehicleLine(){ return vehicleList; }
	public int getLineLength(){ return vehicleList.size(); }
	public String getLineType() { return lineType; }
	public List<Vehicle> getQueue(){ return vehicleList; }
	public Vehicle getQueue(int index){ 
		try { return vehicleList.get(index); } 
		catch (IndexOutOfBoundsException e) { return vehicleList.get(0); } //this method is only used to return the first vehicle in the line, but can be used to return any of them.
	}
	public int getMaxLengthReached() { return maxLengthReached; }
	//set methods
	public void setLineType(String type) { lineType = type; }//type is generated by program, not user
	//add/remove vehicles methods
	public boolean addVehicle(Vehicle vehicle){ //error of setting a vehicle to a manual or automatic line will be handled by simulator
		boolean withinMaxLength = false;
		try {
			if (this.getLineLength()<MAX_LINE_LENGTH){
				vehicleList.add(vehicle); withinMaxLength = true;
			} else { 
				throw new IndexOutOfBoundsException("Shortest Line Has Reached Max Length.");
			}
		} catch (IndexOutOfBoundsException e) { 
			//vehicleList.add(vehicle);
			//System.out.println("Will add vehicle to shortest line regardless of max line size of 25.");
			//System.out.println("Vehicle Dropped.");
		}
		maxLengthReached = (this.maxLengthReached<this.getLineLength()) ? this.getLineLength() : maxLengthReached; //reassign max size reached if necessary
		numOfVehicles = this.getLineLength(); //reassigns the vehicle counting var per line after vehicle is added/removed.
		return withinMaxLength;
	}
	public Vehicle next(int time){ //removes vehicle from line and returns it to add to DoneVehicles list
		Vehicle temp = vehicleList.get(0);
		vehicleList.get(0).setTimeOut(time);
		vehicleList.remove(0);
		return temp;
	}
}